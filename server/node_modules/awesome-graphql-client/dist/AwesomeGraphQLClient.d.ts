import { TypedDocumentNode } from '@graphql-typed-document-node/core';
import { GraphQLRequestError } from './GraphQLRequestError';
import { FileUpload } from './util/isFileUpload';
import { FetchOptions, RequestResult } from './util/types';
export declare class AwesomeGraphQLClient<TQuery = string, TFetchOptions extends FetchOptions = Omit<RequestInit, 'headers'> & Pick<FetchOptions, 'headers'>, TRequestResult extends RequestResult = Response, TFileUpload = FileUpload> {
    private endpoint;
    private fetch;
    private fetchOptions?;
    private formatQuery?;
    private FormData;
    private onError?;
    private isFileUpload;
    constructor(config: {
        /** GraphQL endpoint */
        endpoint: string;
        /** Fetch polyfill if necessary */
        fetch?: (url: string, options?: any) => Promise<TRequestResult>;
        /** FormData polyfill if necessary */
        FormData?: any;
        /** Overrides for fetch options */
        fetchOptions?: TFetchOptions;
        /** Custom query formatter */
        formatQuery?: (query: TQuery) => string;
        /** Callback will be called on error  */
        onError?: (error: GraphQLRequestError | Error) => void;
        /** Custom predicate function for checking if value is a file */
        isFileUpload?: (value: unknown) => value is TFileUpload;
    });
    private createRequestBody;
    /**
     * Returns current GraphQL endpoint
     */
    getEndpoint(): string;
    /**
     * Sets new overrides for fetch options
     *
     * @param fetchOptions new overrides for fetch options
     */
    setFetchOptions(fetchOptions: TFetchOptions): void;
    /**
     * Returns current overrides for fetch options
     */
    getFetchOptions(): TFetchOptions | undefined;
    /**
     * Sends GraphQL Request and returns object with 'ok: true', 'data' and 'response' fields
     * or with 'ok: false' and 'error' fields.
     * Notice: this function never throws
     *
     * @example
     * const result = await requestSafe(...)
     * if (!result.ok) {
     *   throw result.error
     * }
     * console.log(result.data)
     *
     * @param query query
     * @param variables variables
     * @param fetchOptions overrides for fetch options
     */
    requestSafe<TData extends Record<string, any>, TVariables extends Record<string, any> = Record<string, never>>(query: TQuery extends TypedDocumentNode ? TypedDocumentNode<TData, TVariables> : TQuery, variables?: TVariables, fetchOptions?: TFetchOptions): Promise<{
        ok: true;
        data: TData;
        response: TRequestResult;
    } | {
        ok: false;
        error: GraphQLRequestError<TRequestResult> | Error;
    }>;
    /**
     * Makes GraphQL request and returns data or throws an error
     *
     * @example
     * const data = await request(...)
     *
     * @param query query
     * @param variables variables
     * @param fetchOptions overrides for fetch options
     */
    request<TData extends Record<string, any>, TVariables extends Record<string, any> = Record<string, never>>(query: TQuery extends TypedDocumentNode ? TypedDocumentNode<TData, TVariables> : TQuery, variables?: TVariables, fetchOptions?: TFetchOptions): Promise<TData>;
}
//# sourceMappingURL=AwesomeGraphQLClient.d.ts.map