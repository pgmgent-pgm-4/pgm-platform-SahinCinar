function e(){return e=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(e[o]=r[o])}return e},e.apply(this,arguments)}var t=function(e){var t=e.name,r=e.type;this.uri=e.uri,this.name=t,this.type=r},r=function(e){return"undefined"!=typeof File&&e instanceof File||"undefined"!=typeof Blob&&e instanceof Blob||e instanceof t},o=function e(t,o,n){var i;void 0===o&&(o=""),void 0===n&&(n=r);var s=new Map;function a(e,t){var r=s.get(t);r?r.push.apply(r,e):s.set(t,e)}if(n(t))i=null,a([o],t);else{var f=o?o+".":"";if("undefined"!=typeof FileList&&t instanceof FileList)i=Array.prototype.map.call(t,function(e,t){return a([""+f+t],e),null});else if(Array.isArray(t))i=t.map(function(t,r){var o=e(t,""+f+r,n);return o.files.forEach(a),o.clone});else if(t&&t.constructor===Object)for(var u in i={},t){var l=e(t[u],""+f+u,n);l.files.forEach(a),i[u]=l.clone}else i=t}return{clone:i,files:s}};class n extends Error{constructor({query:e,variables:t,response:r,message:o}){super(`GraphQL Request Error: ${o}`),this.query=void 0,this.variables=void 0,this.response=void 0,this.query=e,this.variables=t,this.response=r}}function i(e,t){if(!e)throw new Error(t)}const s=e=>"undefined"!=typeof File&&e instanceof File||"undefined"!=typeof Blob&&e instanceof Blob||"undefined"!=typeof Buffer&&e instanceof Buffer||(e=>"object"==typeof e&&null!==e&&"function"==typeof e.pipe)(e)||(e=>"object"==typeof e&&null!==e&&"function"==typeof e.then)(e);class a{constructor(e){this.endpoint=void 0,this.fetch=void 0,this.fetchOptions=void 0,this.formatQuery=void 0,this.FormData=void 0,this.onError=void 0,this.isFileUpload=void 0,i(e.endpoint,"endpoint is required"),i(e.fetch||"undefined"!=typeof fetch,"Fetch must be polyfilled or passed in new AwesomeGraphQLClient({ fetch })"),i(!e.formatQuery||"function"==typeof e.formatQuery,"Invalid config value: `formatQuery` must be a function"),i(!e.onError||"function"==typeof e.onError,"Invalid config value: `onError` must be a function"),i(!e.isFileUpload||"function"==typeof e.isFileUpload,"Invalid config value: `isFileUpload` should be a function"),this.endpoint=e.endpoint,this.fetch=e.fetch||fetch.bind(null),this.fetchOptions=e.fetchOptions,this.FormData=e.FormData||("undefined"!=typeof FormData?FormData:void 0),this.formatQuery=e.formatQuery,this.onError=e.onError,this.isFileUpload=e.isFileUpload||s}createRequestBody(e,t){const{clone:r,files:n}=o({query:e,variables:t},"",this.isFileUpload),s=JSON.stringify(r);if(!n.size)return s;i(this.FormData,"FormData must be polyfilled or passed in new AwesomeGraphQLClient({ FormData })");const a=new this.FormData;a.append("operations",s);const f={};let u=0;return n.forEach(e=>{f[++u]=e}),a.append("map",JSON.stringify(f)),u=0,n.forEach((e,t)=>{a.append(""+ ++u,t)}),a}getEndpoint(){return this.endpoint}setFetchOptions(e){this.fetchOptions=e}getFetchOptions(){return this.fetchOptions}async requestSafe(t,r,o){try{var s,a;const u=this.formatQuery?this.formatQuery(t):t;i("string"==typeof u,`Query should be a string, not ${typeof u}. Otherwise provide formatQuery option`);const l=e({method:"POST"},this.fetchOptions,o,{headers:e({},null==(s=this.fetchOptions)?void 0:s.headers,null==o?void 0:o.headers)});let c;if("GET"===(null==(a=l.method)?void 0:a.toUpperCase())){const e=function({endpoint:e,query:t,variables:r}){const o=new URLSearchParams;return o.set("query",t),r&&Object.keys(r).length>0&&o.set("variables",JSON.stringify(r)),`${e}?${o.toString()}`}({endpoint:this.endpoint,query:u,variables:r});c=await this.fetch(e,l)}else{const t=this.createRequestBody(u,r);c=await this.fetch(this.endpoint,e({},l,{body:t,headers:"string"==typeof t?e({},l.headers,{"Content-Type":"application/json"}):l.headers}))}if(!c.ok){if((e=>(e.headers.get("Content-Type")||"").includes("application/json"))(c)){var f;const{errors:e}=await c.json();if(null!=e&&null!=(f=e[0])&&f.message)throw new n({query:u,variables:r,response:c,message:e[0].message})}throw new n({query:u,variables:r,response:c,message:`Http Status ${c.status}`})}const{data:p,errors:h}=await c.json();if(null!=h&&h[0])throw new n({query:u,variables:r,response:c,message:h[0].message});return{ok:!0,data:p,response:c}}catch(e){const t=e instanceof Error?e:new Error(String(e));if(this.onError)try{this.onError(t)}catch(e){return{ok:!1,error:t}}return{ok:!1,error:t}}}async request(e,t,r){const o=await this.requestSafe(e,t,r);if(!o.ok)throw o.error;return o.data}}const f=(e,...t)=>e.reduce((e,r,o)=>e+r+(o in t?t[o]:""),"").trim();export{a as AwesomeGraphQLClient,n as GraphQLRequestError,f as gql,s as isFileUpload};
//# sourceMappingURL=index.modern.js.map
